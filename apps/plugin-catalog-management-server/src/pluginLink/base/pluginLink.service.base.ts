/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PluginLink as PrismaPluginLink } from "@prisma/client";

export class PluginLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PluginLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pluginLink.count(args);
  }

  async pluginLinks<T extends Prisma.PluginLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginLinkFindManyArgs>
  ): Promise<PrismaPluginLink[]> {
    return this.prisma.pluginLink.findMany<Prisma.PluginLinkFindManyArgs>(args);
  }
  async pluginLink<T extends Prisma.PluginLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginLinkFindUniqueArgs>
  ): Promise<PrismaPluginLink | null> {
    return this.prisma.pluginLink.findUnique(args);
  }
  async createPluginLink<T extends Prisma.PluginLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginLinkCreateArgs>
  ): Promise<PrismaPluginLink> {
    return this.prisma.pluginLink.create<T>(args);
  }
  async updatePluginLink<T extends Prisma.PluginLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginLinkUpdateArgs>
  ): Promise<PrismaPluginLink> {
    return this.prisma.pluginLink.update<T>(args);
  }
  async deletePluginLink<T extends Prisma.PluginLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginLinkDeleteArgs>
  ): Promise<PrismaPluginLink> {
    return this.prisma.pluginLink.delete(args);
  }
  async Customactionname(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
