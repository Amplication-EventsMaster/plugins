/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PluginLink } from "./PluginLink";
import { PluginLinkCountArgs } from "./PluginLinkCountArgs";
import { PluginLinkFindManyArgs } from "./PluginLinkFindManyArgs";
import { PluginLinkFindUniqueArgs } from "./PluginLinkFindUniqueArgs";
import { CreatePluginLinkArgs } from "./CreatePluginLinkArgs";
import { UpdatePluginLinkArgs } from "./UpdatePluginLinkArgs";
import { DeletePluginLinkArgs } from "./DeletePluginLinkArgs";
import { PluginLinkService } from "../pluginLink.service";
@graphql.Resolver(() => PluginLink)
export class PluginLinkResolverBase {
  constructor(protected readonly service: PluginLinkService) {}

  async _pluginLinksMeta(
    @graphql.Args() args: PluginLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PluginLink])
  async pluginLinks(
    @graphql.Args() args: PluginLinkFindManyArgs
  ): Promise<PluginLink[]> {
    return this.service.pluginLinks(args);
  }

  @graphql.Query(() => PluginLink, { nullable: true })
  async pluginLink(
    @graphql.Args() args: PluginLinkFindUniqueArgs
  ): Promise<PluginLink | null> {
    const result = await this.service.pluginLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PluginLink)
  async createPluginLink(
    @graphql.Args() args: CreatePluginLinkArgs
  ): Promise<PluginLink> {
    return await this.service.createPluginLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PluginLink)
  async updatePluginLink(
    @graphql.Args() args: UpdatePluginLinkArgs
  ): Promise<PluginLink | null> {
    try {
      return await this.service.updatePluginLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PluginLink)
  async deletePluginLink(
    @graphql.Args() args: DeletePluginLinkArgs
  ): Promise<PluginLink | null> {
    try {
      return await this.service.deletePluginLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async Customactionname(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.Customactionname(args);
  }
}
