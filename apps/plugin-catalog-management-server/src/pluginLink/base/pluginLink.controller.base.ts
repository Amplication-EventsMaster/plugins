/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PluginLinkService } from "../pluginLink.service";
import { PluginLinkCreateInput } from "./PluginLinkCreateInput";
import { PluginLink } from "./PluginLink";
import { PluginLinkFindManyArgs } from "./PluginLinkFindManyArgs";
import { PluginLinkWhereUniqueInput } from "./PluginLinkWhereUniqueInput";
import { PluginLinkUpdateInput } from "./PluginLinkUpdateInput";

export class PluginLinkControllerBase {
  constructor(protected readonly service: PluginLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PluginLink })
  async createPluginLink(
    @common.Body() data: PluginLinkCreateInput
  ): Promise<PluginLink> {
    return await this.service.createPluginLink({
      data: data,
      select: {
        createdAt: true,
        githubLink: true,
        id: true,
        npmLink: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PluginLink] })
  @ApiNestedQuery(PluginLinkFindManyArgs)
  async pluginLinks(@common.Req() request: Request): Promise<PluginLink[]> {
    const args = plainToClass(PluginLinkFindManyArgs, request.query);
    return this.service.pluginLinks({
      ...args,
      select: {
        createdAt: true,
        githubLink: true,
        id: true,
        npmLink: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PluginLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pluginLink(
    @common.Param() params: PluginLinkWhereUniqueInput
  ): Promise<PluginLink | null> {
    const result = await this.service.pluginLink({
      where: params,
      select: {
        createdAt: true,
        githubLink: true,
        id: true,
        npmLink: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PluginLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePluginLink(
    @common.Param() params: PluginLinkWhereUniqueInput,
    @common.Body() data: PluginLinkUpdateInput
  ): Promise<PluginLink | null> {
    try {
      return await this.service.updatePluginLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          githubLink: true,
          id: true,
          npmLink: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PluginLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePluginLink(
    @common.Param() params: PluginLinkWhereUniqueInput
  ): Promise<PluginLink | null> {
    try {
      return await this.service.deletePluginLink({
        where: params,
        select: {
          createdAt: true,
          githubLink: true,
          id: true,
          npmLink: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/customactionname")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async Customactionname(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.Customactionname(body);
  }
}
