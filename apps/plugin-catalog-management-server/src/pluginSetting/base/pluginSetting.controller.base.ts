/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PluginSettingService } from "../pluginSetting.service";
import { PluginSettingCreateInput } from "./PluginSettingCreateInput";
import { PluginSetting } from "./PluginSetting";
import { PluginSettingFindManyArgs } from "./PluginSettingFindManyArgs";
import { PluginSettingWhereUniqueInput } from "./PluginSettingWhereUniqueInput";
import { PluginSettingUpdateInput } from "./PluginSettingUpdateInput";

export class PluginSettingControllerBase {
  constructor(protected readonly service: PluginSettingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PluginSetting })
  async createPluginSetting(
    @common.Body() data: PluginSettingCreateInput
  ): Promise<PluginSetting> {
    return await this.service.createPluginSetting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PluginSetting] })
  @ApiNestedQuery(PluginSettingFindManyArgs)
  async pluginSettings(
    @common.Req() request: Request
  ): Promise<PluginSetting[]> {
    const args = plainToClass(PluginSettingFindManyArgs, request.query);
    return this.service.pluginSettings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PluginSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pluginSetting(
    @common.Param() params: PluginSettingWhereUniqueInput
  ): Promise<PluginSetting | null> {
    const result = await this.service.pluginSetting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PluginSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePluginSetting(
    @common.Param() params: PluginSettingWhereUniqueInput,
    @common.Body() data: PluginSettingUpdateInput
  ): Promise<PluginSetting | null> {
    try {
      return await this.service.updatePluginSetting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PluginSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePluginSetting(
    @common.Param() params: PluginSettingWhereUniqueInput
  ): Promise<PluginSetting | null> {
    try {
      return await this.service.deletePluginSetting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
