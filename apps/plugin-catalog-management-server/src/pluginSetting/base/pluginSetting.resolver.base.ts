/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PluginSetting } from "./PluginSetting";
import { PluginSettingCountArgs } from "./PluginSettingCountArgs";
import { PluginSettingFindManyArgs } from "./PluginSettingFindManyArgs";
import { PluginSettingFindUniqueArgs } from "./PluginSettingFindUniqueArgs";
import { CreatePluginSettingArgs } from "./CreatePluginSettingArgs";
import { UpdatePluginSettingArgs } from "./UpdatePluginSettingArgs";
import { DeletePluginSettingArgs } from "./DeletePluginSettingArgs";
import { PluginSettingService } from "../pluginSetting.service";
@graphql.Resolver(() => PluginSetting)
export class PluginSettingResolverBase {
  constructor(protected readonly service: PluginSettingService) {}

  async _pluginSettingsMeta(
    @graphql.Args() args: PluginSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PluginSetting])
  async pluginSettings(
    @graphql.Args() args: PluginSettingFindManyArgs
  ): Promise<PluginSetting[]> {
    return this.service.pluginSettings(args);
  }

  @graphql.Query(() => PluginSetting, { nullable: true })
  async pluginSetting(
    @graphql.Args() args: PluginSettingFindUniqueArgs
  ): Promise<PluginSetting | null> {
    const result = await this.service.pluginSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PluginSetting)
  async createPluginSetting(
    @graphql.Args() args: CreatePluginSettingArgs
  ): Promise<PluginSetting> {
    return await this.service.createPluginSetting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PluginSetting)
  async updatePluginSetting(
    @graphql.Args() args: UpdatePluginSettingArgs
  ): Promise<PluginSetting | null> {
    try {
      return await this.service.updatePluginSetting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PluginSetting)
  async deletePluginSetting(
    @graphql.Args() args: DeletePluginSettingArgs
  ): Promise<PluginSetting | null> {
    try {
      return await this.service.deletePluginSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
