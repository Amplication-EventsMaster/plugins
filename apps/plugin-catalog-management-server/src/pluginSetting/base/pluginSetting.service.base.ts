/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PluginSetting as PrismaPluginSetting } from "@prisma/client";

export class PluginSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PluginSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pluginSetting.count(args);
  }

  async pluginSettings<T extends Prisma.PluginSettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginSettingFindManyArgs>
  ): Promise<PrismaPluginSetting[]> {
    return this.prisma.pluginSetting.findMany<Prisma.PluginSettingFindManyArgs>(
      args
    );
  }
  async pluginSetting<T extends Prisma.PluginSettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginSettingFindUniqueArgs>
  ): Promise<PrismaPluginSetting | null> {
    return this.prisma.pluginSetting.findUnique(args);
  }
  async createPluginSetting<T extends Prisma.PluginSettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginSettingCreateArgs>
  ): Promise<PrismaPluginSetting> {
    return this.prisma.pluginSetting.create<T>(args);
  }
  async updatePluginSetting<T extends Prisma.PluginSettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginSettingUpdateArgs>
  ): Promise<PrismaPluginSetting> {
    return this.prisma.pluginSetting.update<T>(args);
  }
  async deletePluginSetting<T extends Prisma.PluginSettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginSettingDeleteArgs>
  ): Promise<PrismaPluginSetting> {
    return this.prisma.pluginSetting.delete(args);
  }
}
