/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Plugin as PrismaPlugin } from "@prisma/client";

export class PluginServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PluginCountArgs, "select">): Promise<number> {
    return this.prisma.plugin.count(args);
  }

  async plugins<T extends Prisma.PluginFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginFindManyArgs>
  ): Promise<PrismaPlugin[]> {
    return this.prisma.plugin.findMany<Prisma.PluginFindManyArgs>(args);
  }
  async plugin<T extends Prisma.PluginFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginFindUniqueArgs>
  ): Promise<PrismaPlugin | null> {
    return this.prisma.plugin.findUnique(args);
  }
  async createPlugin<T extends Prisma.PluginCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginCreateArgs>
  ): Promise<PrismaPlugin> {
    return this.prisma.plugin.create<T>(args);
  }
  async updatePlugin<T extends Prisma.PluginUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginUpdateArgs>
  ): Promise<PrismaPlugin> {
    return this.prisma.plugin.update<T>(args);
  }
  async deletePlugin<T extends Prisma.PluginDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginDeleteArgs>
  ): Promise<PrismaPlugin> {
    return this.prisma.plugin.delete(args);
  }
}
