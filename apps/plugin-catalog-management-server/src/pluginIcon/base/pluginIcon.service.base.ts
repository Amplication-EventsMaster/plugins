/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PluginIcon as PrismaPluginIcon } from "@prisma/client";

export class PluginIconServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PluginIconCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pluginIcon.count(args);
  }

  async pluginIcons<T extends Prisma.PluginIconFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginIconFindManyArgs>
  ): Promise<PrismaPluginIcon[]> {
    return this.prisma.pluginIcon.findMany<Prisma.PluginIconFindManyArgs>(args);
  }
  async pluginIcon<T extends Prisma.PluginIconFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginIconFindUniqueArgs>
  ): Promise<PrismaPluginIcon | null> {
    return this.prisma.pluginIcon.findUnique(args);
  }
  async createPluginIcon<T extends Prisma.PluginIconCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginIconCreateArgs>
  ): Promise<PrismaPluginIcon> {
    return this.prisma.pluginIcon.create<T>(args);
  }
  async updatePluginIcon<T extends Prisma.PluginIconUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginIconUpdateArgs>
  ): Promise<PrismaPluginIcon> {
    return this.prisma.pluginIcon.update<T>(args);
  }
  async deletePluginIcon<T extends Prisma.PluginIconDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PluginIconDeleteArgs>
  ): Promise<PrismaPluginIcon> {
    return this.prisma.pluginIcon.delete(args);
  }
}
